"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os, random, string
from pathlib        import Path
from dotenv         import load_dotenv
from distutils.util import strtobool 
from django.contrib import messages
from django.utils.translation import gettext_lazy as _

import sentry_sdk

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    SECRET_KEY = ''.join(random.choice( string.ascii_lowercase  ) for i in range( 32 ))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.getenv('DEBUG', "False"))

# Hosts Settings
ALLOWED_HOSTS = ['localhost', '23.227.187.230', '127.0.0.1']
CSRF_TRUSTED_ORIGINS = ['http://23.227.187.230/',]

# Used by DEBUG-Toolbar
INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    'loader',
    'whap',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "home",
    "apps.common",
    "apps.users",
    "apps.charts", 
    "apps.tables",
    "apps.view_builder",
    "apps.finding",
    "apps.file_manager",
    "apps.graic",

    'drf_spectacular',
    'django_api_gen',
    'import_export',

    # "debug_toolbar",

    # allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',

    'background_task',
    'rest_framework',
    'django_quill',
    'django_celery_beat',
    'django_celery_results',
]

LOADER_MODEL_APPS = ['tables','common']     # <-- List of app names where the model exits 

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "debug_toolbar.middleware.DebugToolbarMiddleware",

    "allauth.account.middleware.AccountMiddleware",
    "apps.users.middleware.LoginRequiredMiddleware",
    "apps.users.middleware.CurrentRequestMiddleware",
    "apps.users.middleware.SidebarPermissionMiddleware",
    "apps.users.middleware.AuditUserMiddleware",
]

ROOT_URLCONF = "core.urls"
AUTH_USER_MODEL = "users.User"
UI_TEMPLATES = os.path.join(BASE_DIR, 'templates') 

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [UI_TEMPLATES],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "apps.tables.context_processors.dt_context",

                'whap.context_processors.whap_context',
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DB_ENGINE   = os.getenv('DB_ENGINE'   , None)
DB_USERNAME = os.getenv('DB_USERNAME' , None)
DB_PASS     = os.getenv('DB_PASS'     , None)
DB_HOST     = os.getenv('DB_HOST'     , None)
DB_PORT     = os.getenv('DB_PORT'     , None)
DB_NAME     = os.getenv('DB_NAME'     , None)

if DB_ENGINE and DB_NAME and DB_USERNAME:
    DATABASES = { 
        'default': {
            'ENGINE'  : 'mssql' if DB_ENGINE == 'mssql' else 'django.db.backends.' + DB_ENGINE, 
            'NAME'    : DB_NAME,
            'USER'    : DB_USERNAME,
            'PASSWORD': DB_PASS,
            'HOST'    : DB_HOST,
            'PORT'    : DB_PORT,
        }, 
    }
    if DB_ENGINE == 'mssql':
        DATABASES['default']['OPTIONS'] = {
            'driver': 'ODBC Driver 17 for SQL Server',
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    # {
    #     "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    # },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        'NAME': 'apps.users.validators.CustomPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGES = [
    ('en', _('English (US)')),
    ('de', _('Deutsch')),
    ('it', _('Italiano')),
]


LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Johannesburg"

USE_I18N = True

USE_TZ = True

USE_L10N = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL  = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# All auth
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

# allauth config
ACCOUNT_EMAIL_VERIFICATION =  os.getenv("ACCOUNT_EMAIL_VERIFICATION", "optional")
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
# SOCIALACCOUNT_LOGIN_ON_GET=True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "/"

LOGIN_REDIRECT_URL = '/index'


# ### API-GENERATOR Settings ###
DYN_DT = {
    'devices'         : "apps.tables.models.Devices",
    'software-master' : "apps.tables.models.SoftwareMaster",
}

# ### API-GENERATOR Settings ###
API_GENERATOR = {
    'product' : "apps.common.models.Product",
    'devices' : "apps.tables.models.Devices",
    'software-master' : "apps.tables.models.SoftwareMaster",
}

########################################

# risky
SESSION_COOKIE_HTTPONLY=False

MESSAGE_TAGS = {
    messages.INFO: 'text-blue-800 bg-blue-50',
    messages.SUCCESS: 'text-green-800 bg-green-50',
    messages.WARNING: 'text-yellow-800 bg-yellow-50',
    messages.ERROR: 'text-red-800 bg-red-50',
}

SITE_ID = 1

GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID", "")
GOOGLE_SECRET_KEY = os.getenv("GOOGLE_SECRET_KEY", "")

GITHUB_CLIENT_ID = os.getenv("GITHUB_CLIENT_ID", "")
GITHUB_SECRET_KEY = os.getenv("GITHUB_SECRET_KEY", "")


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        "APP": {
            "client_id": GOOGLE_CLIENT_ID,
            "secret": GOOGLE_SECRET_KEY,
        },
    },
    'github': {
        "APP": {
            "client_id": GITHUB_CLIENT_ID,
            "secret": GITHUB_SECRET_KEY,
        },
    },
}



# Stripe
STRIPE_SECRET_KEY      = os.getenv("STRIPE_SECRET_KEY", None)
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY", None)
DOMAIN_URL             = os.getenv("DOMAIN_URL", "http://127.0.0.1:8000/")

STRIPE_IS_ACTIVE = False
if STRIPE_SECRET_KEY and STRIPE_PUBLISHABLE_KEY:
    STRIPE_IS_ACTIVE = True


# Sentry
sentry_sdk.init(
    dsn=os.getenv('DSN_KEY'),
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    traces_sample_rate=1.0,
    # Set profiles_sample_rate to 1.0 to profile 100%
    # of sampled transactions.
    # We recommend adjusting this value in production.
    profiles_sample_rate=1.0,
)




WHAPI_TOKEN = os.getenv('WHAPI_TOKEN')

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}

API_URL = os.getenv('API_URL', 'http://127.0.0.1:8000/')


# Email configuration

EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
#EMAIL_USE_SSL = False

if EMAIL_HOST and EMAIL_HOST_USER and EMAIL_HOST_PASSWORD:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
else:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# Expired session
SESSION_COOKIE_AGE = 86400
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
    
# List of username
USERNAME_LIST = os.getenv('ADMIN_USERNAMES', [])
USERNAME_LIST = USERNAME_LIST.split(',') if USERNAME_LIST else []
ADMIN_USERNAMES = USERNAME_LIST

ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY')
ENCRYPTION_PREFIX = os.getenv('ENCRYPTION_PREFIX', 'ENC::')
ENCRYPTION_MODELS = [
    'tables.ManageEngineSoftwareInventory',
]


# View builder
VIEW_PATH = os.getenv('VIEW_PATH')
TEMPLATE_PATH = os.getenv('TEMPLATE_PATH')
TEMPLATE_TAG_PATH = os.getenv('TEMPLATE_TAG_PATH')
URL_PATH = os.getenv('URL_PATH')

MODELS_FILE_PATH = os.getenv('MODELS_FILE_PATH', [])

#CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "redis://localhost:6379")
#CELERY_RESULT_BACKEND = os.environ.get("CELERY_BROKER", "redis://localhost:6379")
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "amqp://guest:guest@rabbitmq//")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_BROKER", "amqp://guest:guest@rabbitmq//")

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT    = 30 * 60
CELERY_CACHE_BACKEND      = "django-cache"
CELERY_RESULT_BACKEND     = "django-db"
CELERY_RESULT_EXTENDED    = True
CELERY_RESULT_EXPIRES     = 60*60*24*30 # Results expire after 1 month
CELERY_ACCEPT_CONTENT     = ["json"]
CELERY_TASK_SERIALIZER    = 'json'
CELERY_RESULT_SERIALIZER  = 'json'

DATA_UPLOAD_MAX_NUMBER_FILES = 5000

QUILL_CONFIGS = {
    'default':{
        "theme": "snow",
        "modules": {
            "syntax": True,
            "toolbar": [
                [
                    {"font": []},
                    {"header": []},
                    {"align": []},
                    {"list": "ordered"}, 
                    {"list": "bullet"},
                    "bold",
                    "italic",
                    "underline",
                    "strike",
                    "blockquote",
                    {"color": []},
                    {"background": []},
                ],
                ["code-block", "link", "image", "video"],
                ["clean"],
            ],
            "imageCompressor": {
                "quality": 0.8,
                "maxWidth": 2000,
                "maxHeight": 2000,
                "imageType": "image/jpeg",
                "debug": False,
                "suppressErrorLogging": True,
            },
            "resize": {
                "showSize": True,
                "locale": {},
            },
        },
    }
}
MODELS_APP_LABEL='tables'

SITE_URL = os.getenv('SITE_URL', 'http://23.227.187.230/')

MAP_FIELD_NAMES = {
    'companies': 'itgc_focus_area',
    'itgc_categories': 'risk',
    'itgc_questions': 'control'
}


DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')